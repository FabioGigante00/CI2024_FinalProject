# Parameters
crossover = recombination_crossover
OFFSPRING_SIZE = 200
POPULATION_SIZE = 100
OUTSIDER_SIZE = math.ceil(OFFSPRING_SIZE*0.1)
INITIAL_PM = 0.2
FINAL_PM = 0.05                                          # CHANGE:: before we had 0.05 here
x_elitism = 0.08
MAX_GENERATIONS = 100
HEIGHT = 5
PC = 0.15                                           # CHANGE:: before we had 0.1 here
P_PICK_CONSTANT = 0.4
P_CUT_TREE = 0.05
CONSTANTS = crammed_constants

# Resulting function
np.divide(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.subtract(np.add(x[1], 96), np.exp(np.add(x[1], x[0]))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.add(x[1], x[0]))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.abs(np.abs(np.add(x[1], x[0]))))), np.exp(np.abs(np.add(x[1], x[0])))), np.exp(np.power(30, np.power(np.exp(np.abs(np.add(x[1], np.exp(x[0])))), np.subtract(x[0], x[0])))))# Resulting fitness
4.165962787985903e-17
