# Configuration
conf = {
    'problem': 6,
    'crossover': <function recombination_crossover at 0x1181a8360>,
    'OFFSPRING_SIZE': 200,
    'POPULATION_SIZE': 100,
    'OUTSIDER_SIZE': 20,
    'pm': 0.15300000000000002,
    'x_elitism': 0.08,
    'MAX_GENERATIONS': 150,
    'HEIGHT': 5,
    'PC': 0.1,
    'P_PICK_CONSTANT': 0.4,
    'P_CUT_TREE': 0.05,
}

# Resulting function
np.subtract(np.add(np.add(x[1], x[1]), np.abs(np.subtract(np.add(my_sqrt(np.add(np.subtract(np.subtract(np.subtract(np.add(np.add(x[0], x[1]), np.abs(np.subtract(np.subtract(6, 6), np.add(np.subtract(np.sin(np.subtract(my_sqrt(np.add(my_sqrt(my_reciprocal(my_sqrt(np.subtract(6, 6)))), my_sqrt(x[0]))), x[1])), np.add(np.add(my_sqrt(x[0]), np.multiply(np.subtract(np.subtract(np.add(np.add(x[0], x[1]), np.abs(np.subtract(np.subtract(6, 6), my_sqrt(np.add(np.add(my_sqrt(x[1]), np.multiply(np.subtract(x[1], x[1]), np.subtract(np.sin(np.subtract(x[1], x[1])), np.add(np.add(my_sqrt(np.add(x[1], np.multiply(np.subtract(x[1], x[1]), np.add(6, x[0])))), np.multiply(np.subtract(np.divide(np.sin(np.subtract(10, x[1])), x[1]), np.multiply(np.sin(np.subtract(x[1], x[1])), np.add(my_sqrt(my_reciprocal(my_sqrt(np.subtract(np.abs(x[1]), 6)))), my_sqrt(x[0])))), x[1])), x[1])))), np.multiply(np.sin(np.subtract(x[1], x[1])), np.add(my_sqrt(my_reciprocal(my_sqrt(x[1]))), my_sqrt(x[0])))))))), x[0]), x[1]), x[1])), np.multiply(np.sin(x[1]), np.divide(np.multiply(np.subtract(x[1], x[1]), np.add(6, x[1])), np.abs(x[0]))))), x[1])))), x[0]), x[1]), x[1]), x[0])), np.multiply(np.subtract(x[1], x[1]), np.add(6, np.add(x[1], x[1])))), my_sqrt(np.add(np.add(my_sqrt(np.add(np.subtract(np.sin(np.subtract(x[1], x[1])), np.add(np.add(my_sqrt(x[0]), np.multiply(np.subtract(np.subtract(np.add(np.add(x[0], x[1]), np.abs(np.subtract(np.subtract(6, 6), my_sqrt(np.add(my_sqrt(x[0]), np.multiply(np.sin(x[1]), np.multiply(np.subtract(x[1], x[1]), np.add(6, x[1])))))))), x[0]), x[1]), x[1])), np.multiply(np.sin(np.subtract(x[1], x[1])), 6))), x[1])), np.multiply(np.subtract(x[1], x[1]), np.add(np.multiply(np.sin(np.subtract(x[1], x[1])), my_sqrt(x[1])), x[1]))), np.multiply(np.sin(np.subtract(x[1], x[1])), np.add(my_sqrt(my_reciprocal(my_sqrt(np.subtract(np.abs(x[1]), 6)))), my_sqrt(np.add(np.add(x[0], x[1]), np.abs(np.subtract(np.subtract(6, 6), my_sqrt(np.add(my_sqrt(x[0]), np.multiply(np.sin(x[1]), np.multiply(np.subtract(x[1], x[1]), 6))))))))))))))), x[0])# Resulting fitness
9.165831125897162