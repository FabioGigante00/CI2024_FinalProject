# Configuration
conf = {
    'problem': 5,
    'crossover': <function recombination_crossover at 0x0000014D4E65E660>,
    'OFFSPRING_SIZE': 200,
    'POPULATION_SIZE': 100,
    'OUTSIDER_SIZE': 20,
    'INITIAL_PM': 0.25,
    'FINAL_PM': 0.15,
    'x_elitism': 0.08,
    'MAX_GENERATIONS': 100,
    'HEIGHT': 5,
    'PC': 0.5,
    'P_PICK_CONSTANT': 0.4,
    'P_CUT_TREE': 0.05,
    'CONSTANTS': [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0, 16.0, 17.0, 18.0, 19.0, 20.0],
}

# Resulting function
np.subtract(np.divide(np.subtract(np.power(x[0], x[1]), np.add(19.9129, np.sin(np.divide(x[0], np.add(my_sqrt(np.multiply(x[0], x[1])), np.power(x[0], x[1])))))), np.add(my_sqrt(np.multiply(-19.4744, x[1])), np.subtract(np.sin(np.subtract(x[1], np.sin(np.divide(x[0], my_sqrt(np.multiply(np.add(np.negative(x[1]), 20), x[0])))))), 19))), my_sqrt(np.divide(np.divide(np.subtract(np.power(x[1], x[0]), x[1]), np.add(np.add(np.sin(np.cos(my_sqrt(np.abs(np.multiply(np.multiply(19, x[1]), x[1]))))), np.subtract(x[1], 19)), my_sqrt(np.multiply(19, x[0])))), np.add(19, np.sin(np.divide(np.multiply(-19.4744, my_sqrt(np.abs(np.multiply(np.multiply(np.multiply(-19.4744, x[1]), x[1]), x[1])))), np.add(np.subtract(my_sqrt(x[0]), -19.4744), 19)))))))# Resulting fitness
3.413299256761218e-20